# When Do You Use the Different Initial Context Factory Classes?
# The type of initial context factory that you use depends on who the client is. The initial context factory creates the
# initial context class for the client.
#
#   - If the client is a pure Java client outside of the OC4J container, use the ApplicationClientInitialContextFactory class.
#   - If the client is an EJB or servlet client within the OC4J container, use the ApplicationInitialContextFactory class.
#       The ApplicationInitialContextFactory class is the default class; thus, each time you create a new InitialContext
#       without specifying any initial context factory class, your client uses the ApplicationInitialContextFactory class.
#   - If the client is an administrative class that is going to manipulate or traverse the JNDI tree,
#       use the com.evermind.server.RMIInitialContextFactory class.
#   - If the client is going to use DNS load balancing, use the RMIInitialContextFactory class.
#
# For example, if you have a pure Java client, then you set the initial context factory class ("java.naming.factory.initial")
# to ApplicationClientInitialContextFactory. The following example sets the initial context factory in the environment,
# but you could also put this in the JNDI properties file.
#
#       env.put("java.naming.factory.initial", "com.evermind.server.ApplicationClientInitialContextFactory");
#
# If the client is an EJB or a servlet calling an EJB in the same application, you can use the default by not setting the
# JNDI properties with a initial context factory and uses the ApplicationInitialContextFactory object by executing the following:
#
#       InitialContext ic = new InitialContext();
#
# If you decide to use the RMIInitialContextFactory class, you must use the JNDI name in the lookup and not a logical
# name defined in the <ejb-ref> in your XML configuration file.
########################################################################################################################
#OC4J
 java.naming.factory.initial=com.evermind.server.ApplicationClientInitialContextFactory
#java.naming.factory.initial=com.evermind.server.rmi.RMIInitialContextFactory
java.naming.provider.url=ormi://127.0.0.1:23791/HelloJ2EE13
java.naming.security.principal=oc4jadmin
java.naming.security.credentials=oc4jadmin
# java.naming.security.authentication=simple
# java.naming.security.protocol=ssl
########################################################################################################################
########################################################################################################################
#JBOSS
#java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
########################################################################################################################
